class IdentifiableEntity(object):
    def __init__(self, id) -> None:
        self.id = id 

    def getId(self) -> str:
        return self.id

class Image(IdentifiableEntity):
    pass

class Annotation(IdentifiableEntity):
    def __init__(self, motivation, target, body) -> None:
        self.motivation = motivation
        self.target = target
        self.body = body

    def getBody(self) -> Image:
        return self.body

    def getMotivation(self) -> str:
        return self.motivation

    def getTarget(self) -> IdentifiableEntity:
        return self.target

class EntityWithMetadata(IdentifiableEntity):
    def __init__(self, id, label:str, title:str, creators:str) -> None:
        self.label = label
        self.title = title
        self.creators = set()
        for creator in creators:
            self.creators.add(creator)

        super().__init__(id)

    def getLabel(self) -> str:
        return self.label

    def getTitle(self) -> str: #(or None)
        return self.title

    def getCreators(self) -> list[str]:
        return self.creators

class Canvas(EntityWithMetadata):
    def __init__(self, id) -> None:
        super().__init__(id)

class Manifest(EntityWithMetadata):
    def __init__(self, id, items) -> None:
        self.items = set()
        for item in items:
            self.items.add(item)

        super().__init__(id)

    def getItems(self) -> list[Canvas]:
        return self.items

class Collection(EntityWithMetadata):
    def __init__(self, id, items) -> None:
        self.items = set()
        for item in items:
            self.items.add(item)

        super().__init__(id)

    def getItems(self) -> list[Manifest]:
        return self.items
